import { Hono } from 'hono';
import { ExternalService } from '../service';
import { AgentEnv } from '../env';
import { ToolSet } from 'ai';
import { MiddlewareService } from '../aisdk/middleware';
/**
 * Configuration for an MCP tool server
 */
export interface MCPServerConfig {
    url?: string;
    command?: string;
    args?: string[];
    env?: Record<string, string>;
}
/**
 * Service for managing and exposing tools configurations and injecting them into the language model
 */
export declare class ToolboxService implements ExternalService, MiddlewareService {
    name: string;
    private env;
    private mcpClientManager;
    private serverNames;
    constructor(env: AgentEnv);
    isBase64(str: string): boolean;
    /**
     * Parse the MCP servers configuration from environment variables
     */
    private parseServerConfig;
    /**
     * Initialize the tools service by connecting to configured MCP servers
     */
    initialize(): Promise<void>;
    /**
     * Check for duplicate tool names across MCP servers and log warnings
     */
    private checkForDuplicateToolNames;
    /**
     * Register tool-related routes with the Hono app
     */
    registerRoutes<E extends AgentEnv>(app: Hono<{
        Bindings: E;
    }>): void;
    /**
     * Clean up resources when service is shutdown
     */
    shutdown(): Promise<void>;
    transformStreamTextTools(tools?: ToolSet): ToolSet;
}
